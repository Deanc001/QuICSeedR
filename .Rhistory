devtools::check()
setwd("~/R/QuICAnalysis_Manuscript/Vignette")
data = readRDS(plate_96.RDS
)
data = readRDS('plate_96.RDS'
)
save(data, file = "plate_96.rda")
data = readRDS('plate_384.RDS' )
save(data, file = "plate_384.rda")
data = readRDS('rawdata_384.RDS' )
save(data, file = "rawdata_384.rda")
data = readRDS('rawdata_96.RDS' )
save(data, file = "rawdata_96.rda")
setwd("~/R/QuICAnalysis_Manuscript/blood")
data = readRDS('multiplate_blood.RDS' )
save(data, file = "multiplate_blood.rda")
setwd("~/R/QuICAnalysis_Manuscript/elk ear")
data = readRDS('multiplate_elkear.RDS' )
save(data, file = "multiplate_elkear.rda")
setwd("~/R/QuICAnalysis_Manuscript/muscle")
data = readRDS('multiplate_muscle.RDS' )
save(data, file = "multiplate_muscle.rda")
setwd("~/R/QuICAnalysis_Manuscript/grinder")
data = readRDS('multiplate_application.RDS' )
setwd("~/R/QuICAnalysis_Manuscript/grinder")
data = readRDS('multiplate_application.RDS' )
data = readRDS('multiplate_application.rds' )
setwd("~/R/QuICAnalysis_Manuscript/grinder")
flip_and_replace <- function(x) {
process_single <- function(match) {
parts <- strsplit(match, "\\^")[[1]]
base <- parts[1]
exponent <- parts[2]
if (exponent == "-1") {
return(paste0("10e1_", base))
} else if (exponent == "-2") {
return(paste0("10e2_", base))
} else {
return(paste0("10e3_", base))
}
}
pattern <- "\\w+\\^-[123]\\b"
matches <- gregexpr(pattern, x)
regmatches(x, matches) <- lapply(regmatches(x, matches), function(match) sapply(match, process_single))
return(x)
}
library(stringr)
library(readxl)
library(tidyverse)
library(QuICAnalysis)
folders <- list.dirs(path = ".", recursive = FALSE)
mylist = vector(mode = 'list', length = length(folders))
listnames = sub("\\./", "", folders)
names(mylist) = c(listnames)
for (i in 1:length(folders)) {
folder <- folders[i]
files <- list.files(path = folder, pattern = "*.xlsx", full.names = TRUE)
plate_path <- files[grepl("[Pp]late", files)]
raw_path <- files[grepl("[Rr]aw", files)]
plate_data <- read_xlsx(plate_path)
raw_data <- read_xlsx(raw_path)
replicate_data <- GetReplicate(plate_data)
mylist[[i]][['plate']] <- plate_data
mylist[[i]][["plate"]] <- data.frame(lapply(mylist[[i]][["plate"]], flip_and_replace))
mylist[[i]][['raw']] <- raw_data
mylist[[i]][['replicate']] <- replicate_data
}
sublist = vector(mode = 'list')
subcalculation = vector(mode = 'list')
subcleanraw= vector(mode = 'list')
subresult = vector(mode = 'list')
save(mylist, file = 'multiplate_grinderpilot.rda')
library(devtools)
check()
check()
check()
install()
install()
library(devtools)
build()
install()
check()
check()
devtools::check()
devtools::install()
devtools::build()
install()
devtools::install()
library(stringr)
library(tidyverse)
library(QuICAnalysis)
mylist = readRDS('multiplate_grinderpilot.rds')
devtools::check()
devtools::check()
devtools::check()
install()
devtools::install()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
devtools::check()
devtools::build()
devtools::install()
tinytex_root()
library(tinytex)
tinytex_root()
Sys.which(c("pdflatex", "bibtex", "makeindex"))
tinytex_bin <- file.path(tinytex::tinytex_root(), "bin", "windows")
current_path <- Sys.getenv("PATH")
new_path <- paste(current_path, tinytex_bin, sep = ";")
Sys.setenv(PATH = new_path)
Sys.which(c("pdflatex", "bibtex", "makeindex")) #should show their executable path
devtools::build_manual()
